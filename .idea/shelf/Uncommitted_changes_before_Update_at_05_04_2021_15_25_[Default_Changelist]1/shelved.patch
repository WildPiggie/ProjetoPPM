Index: src/QTree.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.Color // usamos as cores do java?\r\n\r\ntrait QTree[+A] {\r\n  /**\r\n   * T1. makeQTree(b:BitMap):QTree criação de uma quadtree a partir de um bitmap\r\n   * fornecido e método oposto i.e. para transformar uma quadtree num bitmap;\r\n   * T2. scale(scale:Double, qt:QTree):QTree operação de ampliação/redução de\r\n   * uma imagem, segundo o fator fornecido (por exemplo 1.5 ampliará a imagem\r\n   * aumentando ambos os seus lados em 50%);\r\n   * T3. mirrorV / mirrorH (qt:QTree):QTree operações de espelhamento vertical e\r\n   * horizontal;\r\n   * T4. rotateD / rotateR (qt:QTree):QTree operações de rotação de 90 graus nos\r\n   * dois sentidos;\r\n   * T5. mapColourEffect(f:Colour => Colour, qt:QTree):QTree mapeamento\r\n   * uniforme de uma função em toda a imagem. Deverá utilizar este método para ilustrar\r\n   * a aplicação dos efeitos Noise, Contrast e Sepia.\r\n   */\r\n\r\n  def makeQTree[A] (b:BitMap):QTree[A]\r\n  def scale[A](scale:Double, qt:QTree[A]):QTree[A]\r\n  def mirrorV[A] (qt:QTree[A]):QTree[A]\r\n  def mirrorH[A] (qt:QTree[A]):QTree[A]\r\n  def rotateD[A] (qt:QTree[A]):QTree[A]\r\n  def rotateR[A] (qt:QTree[A]):QTree[A]\r\n  def mapColourEffect[A] (f:Color => Color, qt:QTree[A]):QTree[A]\r\n\r\n}
===================================================================
diff --git a/src/QTree.scala b/src/QTree.scala
--- a/src/QTree.scala	
+++ b/src/QTree.scala	
@@ -1,20 +1,20 @@
 import java.awt.Color // usamos as cores do java?
 
 trait QTree[+A] {
-  /**
-   * T1. makeQTree(b:BitMap):QTree criação de uma quadtree a partir de um bitmap
-   * fornecido e método oposto i.e. para transformar uma quadtree num bitmap;
-   * T2. scale(scale:Double, qt:QTree):QTree operação de ampliação/redução de
-   * uma imagem, segundo o fator fornecido (por exemplo 1.5 ampliará a imagem
-   * aumentando ambos os seus lados em 50%);
-   * T3. mirrorV / mirrorH (qt:QTree):QTree operações de espelhamento vertical e
-   * horizontal;
-   * T4. rotateD / rotateR (qt:QTree):QTree operações de rotação de 90 graus nos
-   * dois sentidos;
-   * T5. mapColourEffect(f:Colour => Colour, qt:QTree):QTree mapeamento
-   * uniforme de uma função em toda a imagem. Deverá utilizar este método para ilustrar
-   * a aplicação dos efeitos Noise, Contrast e Sepia.
-   */
+  /*
+  * T1. makeQTree(b:BitMap):QTree criação de uma quadtree a partir de um bitmap
+  * fornecido e método oposto i.e. para transformar uma quadtree num bitmap;
+  * T2. scale(scale:Double, qt:QTree):QTree operação de ampliação/redução de
+  * uma imagem, segundo o fator fornecido (por exemplo 1.5 ampliará a imagem
+  * aumentando ambos os seus lados em 50%);
+  * T3. mirrorV / mirrorH (qt:QTree):QTree operações de espelhamento vertical e
+  * horizontal;
+  * T4. rotateD / rotateR (qt:QTree):QTree operações de rotação de 90 graus nos
+  * dois sentidos;
+  * T5. mapColourEffect(f:Colour => Colour, qt:QTree):QTree mapeamento
+  * uniforme de uma função em toda a imagem. Deverá utilizar este método para ilustrar
+  * a aplicação dos efeitos Noise, Contrast e Sepia.
+  */
 
   def makeQTree[A] (b:BitMap):QTree[A]
   def scale[A](scale:Double, qt:QTree[A]):QTree[A]
